<?php

/**
 * В данном упражнении необходимо реализовать стековую машину, то есть алгоритм, 
 * проводящий вычисления по обратной польской записи.
 * 
 * Обратная польская нотация или постфиксная нотация — форма записи математических 
 * и логических выражений, в которой операнды расположены перед знаками операций. 
 * Выражение читается слева направо. Когда в выражении встречается знак операции, 
 * выполняется соответствующая операция над двумя ближайшими операндами, 
 * находящимися слева от знака операции. Результат операции заменяет в выражении 
 * последовательность её операндов и знак, после чего выражение вычисляется дальше 
 * по тому же правилу. Таким образом, результатом вычисления всего выражения 
 * становится результат последней вычисленной операции.
 * 
 * Например, выражение (1 + 2) * 4 + 3 в постфиксной нотации будет выглядеть 
 * так: 1 2 + 4 * 3 +, а результат вычисления: 15. Другой пример - 
 * выражение: 7 - 2 * 3, в постфиксной нотации: 7 2 3 * -, результат: 1.
 * 
 * src\Arrays.php
 * Реализуйте функцию calcInPolishNotation, которая принимает массив, каждый 
 * элемент которого содержит число или знак операции (+, -, *, /). Функция 
 * должна вернуть результат вычисления по обратной польской записи. Если в 
 * какой-то момент происходит деление на ноль, функция должна вернуть 
 * значение null.
 */

function calcl($num1, $num2, $signCal)
{
    $result = 0;
    if ($num1 !== 0) {
        switch ($signCal) {
            case '+':
                $result = $num2 + $num1;
                break;
            case '-':
                $result = $num2 - $num1;
                break;
            case '*':
                $result = $num2 * $num1;
                break;
            case '/':
                $result = $num2 / $num1;
                break;
        }
    } /*else {
        return null;
    }*/
    return $result;
}
function calcInPolishNotation($equation)
{
    $pattern = ['+',' -', '*', '/'];
    $stack = [];
    foreach ($equation as $sign) {
        if (!in_array($sign, $pattern)) {
            array_push($stack, $sign);
        } else {
            $signCal = $sign;
            $num1 = array_pop($stack);
            $num2 = array_pop($stack);
            array_push($stack, calcl($num1, $num2, $signCal));
        }
    }
    if (count($stack) === 3) {
        $result = calcl($stack[1], $stack[0], $stack[2]);
        return $result;
    } elseif ($stack[0] === 0) {
        return null;
    } else {
        return array_pop($stack);
    }
}